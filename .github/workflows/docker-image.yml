name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ca-central-1
  ECR_FRONTEND_REPOSITORY: blynk-frontend
  ECR_BACKEND_REPOSITORY: blynk-backend
  S3_BUCKET: blynk-codepipeline-artifacts

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    # Build and push Docker images manually instead of using actions
    - name: Build and push frontend image
      run: |
        cd frontend
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:latest .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:latest
        echo "FRONTEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:latest" >> $GITHUB_ENV
        
    - name: Build and push backend image
      run: |
        cd backend
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:latest .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:latest
        echo "BACKEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:latest" >> $GITHUB_ENV
        
    - name: Create deployment artifacts
      run: |
        # Create build directory
        mkdir -p build
        
        # Create image definitions files
        echo "Creating image definitions files..."
        echo '[{"name":"blynk-frontend","imageUri":"'$FRONTEND_IMAGE'"}]' > build/frontend-imagedefinitions.json
        echo '[{"name":"blynk-backend","imageUri":"'$BACKEND_IMAGE'"}]' > build/backend-imagedefinitions.json
        
        # Show content
        echo "Image definitions content:"
        cat build/frontend-imagedefinitions.json
        cat build/backend-imagedefinitions.json
        
        # Create zip file
        cd build
        zip -r ../source.zip .
        cd ..
        
        # Check if bucket exists and upload
        if aws s3api head-bucket --bucket ${{ env.S3_BUCKET }} 2>/dev/null; then
          echo "S3 bucket exists, uploading source.zip..."
          aws s3 cp source.zip s3://${{ env.S3_BUCKET }}/source.zip
          echo "Successfully uploaded source.zip to S3"
        else
          echo "S3 bucket does not exist. Skipping upload. Run terraform apply to create the infrastructure first."
        fi
        
    - name: Verify ECR images
      run: |
        echo "Verifying frontend image in ECR..."
        aws ecr describe-images --repository-name ${{ env.ECR_FRONTEND_REPOSITORY }} --image-ids imageTag=latest || echo "Frontend image verification failed, but continuing..."
        
        echo "Verifying backend image in ECR..."
        aws ecr describe-images --repository-name ${{ env.ECR_BACKEND_REPOSITORY }} --image-ids imageTag=latest || echo "Backend image verification failed, but continuing..."
      continue-on-error: true
